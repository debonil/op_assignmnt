# -*- coding: utf-8 -*-
"""Optimization project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-_CrDlI9vUNp0yG1suyxC4MXLHfzrwQh
"""



from numpy import *
from numpy import array
from scipy.optimize import *
import scipy as scp
from scipy.special import logsumexp
# code for penalty function method
# min f(x)=(x1-R)^2 +(x1-2x2)^2
# s. t. h(x):x1^2-x2=0
R= 25
x0,eps,tol,mu,beta,iter1=array([R,R/2]),pow(10,-5),1,0.1,10,0
def pen(x):
    # define objective function of unconstrained problem
   
    return pow((x[0]-R),2)+ pow((x[0]-2*x[1]),2)+mu*pow((pow(x[0],2)-x[1]),2)
def jac_pen(x):
    #gradient of above function
    return array([2*(x[0]-R)+2*(x[0]-2*x[1]+2*mu*(pow(x[0], 2)-x[1])*2*x[0]),
                  -4*(x[0]-2*x[1])-2*mu*(pow(x[0], 2)-x[1])])
 #initialization
while (tol>eps)and(iter1<200):
    res = scp.optimize.minimize(pen, x0, method='BFGS',jac=jac_pen,options={'disp': False})# solve unconstrained problem
    x0,h=res.x,pow(x0[0],2)-x0[1] #updates
    print('h=',h)
    tol,mu,iter1=logsumexp(mu*pow(h,2)),logsumexp(mu*beta),iter1+1
    print('tol=',tol)
print('*************************************')
print('optimal solution=',x0)
print('Total no of iteration',iter1)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
def f(x, y):
    return np.power((x-56),2)+ np.power((x-2*y),2)

x = np.linspace(-200, 200, 200)
y = np.linspace(-200, 200, 200)

X, Y = np.meshgrid(x, y)
Z = f(X, Y)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.contour3D(X, Y, Z, 200, cmap='binary')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z');

"""# New Section"""